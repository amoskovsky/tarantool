/***** This file contains automatically generated code ******
**
** The code in this file has been automatically generated by
**
**   sqlite/tool/mkkeywordhash.c
**
** The code in this file implements a function that determines whether
** or not a given identifier is really an SQL keyword.  The same thing
** might be implemented more directly using a hand-written hash table.
** But by using this automatically generated code, the size of the code
** is substantially reduced.  This is important for embedded applications
** on platforms with limited memory.
*/
/* Hash score: 176 */
static int keywordCode(const char *z, int n, int *pType){
  /* zText[] encodes 802 bytes of keywords in 532 bytes */
  /*   REINDEXEDESCAPEACHECKEYBEFOREIGNOREGEXPLAINSTEADDATABASELECT       */
  /*   ABLEFTHENDEFERRABLELSEXCEPTRANSACTIONATURALTERAISEXISTS            */
  /*   AVEPOINTERSECTRIGGEREFERENCESCONSTRAINTOFFSETUNIQUERYWITHOUTER     */
  /*   ELEASEATTACHAVINGROUPDATEBEGINNERECURSIVEBETWEENOTNULLIKE          */
  /*   CASCADETACHCASEJOINSERTMATCHPLANALYZEPRAGMABORTVALUESVIRTUAL       */
  /*   IMITWHENWHERENAMEAFTEREPLACEANDEFAULTAUTOINCREMENTCASTCOLLATE      */
  /*   COLUMNCOMMITCONFLICTCREATECROSSCURRENT_DATECURRENT_TIMESTAMP       */
  /*   RIMARYDEFERREDELETEDISTINCTDROPFAILFROMFULLGLOBYIFIMMEDIATE        */
  /*   ISNULLORDERESTRICTRIGHTROLLBACKROWUNIONUSINGVIEWINITIALLY          */
  static const char zText[531] = {
    'R','E','I','N','D','E','X','E','D','E','S','C','A','P','E','A','C','H',
    'E','C','K','E','Y','B','E','F','O','R','E','I','G','N','O','R','E','G',
    'E','X','P','L','A','I','N','S','T','E','A','D','D','A','T','A','B','A',
    'S','E','L','E','C','T','A','B','L','E','F','T','H','E','N','D','E','F',
    'E','R','R','A','B','L','E','L','S','E','X','C','E','P','T','R','A','N',
    'S','A','C','T','I','O','N','A','T','U','R','A','L','T','E','R','A','I',
    'S','E','X','I','S','T','S','A','V','E','P','O','I','N','T','E','R','S',
    'E','C','T','R','I','G','G','E','R','E','F','E','R','E','N','C','E','S',
    'C','O','N','S','T','R','A','I','N','T','O','F','F','S','E','T','U','N',
    'I','Q','U','E','R','Y','W','I','T','H','O','U','T','E','R','E','L','E',
    'A','S','E','A','T','T','A','C','H','A','V','I','N','G','R','O','U','P',
    'D','A','T','E','B','E','G','I','N','N','E','R','E','C','U','R','S','I',
    'V','E','B','E','T','W','E','E','N','O','T','N','U','L','L','I','K','E',
    'C','A','S','C','A','D','E','T','A','C','H','C','A','S','E','J','O','I',
    'N','S','E','R','T','M','A','T','C','H','P','L','A','N','A','L','Y','Z',
    'E','P','R','A','G','M','A','B','O','R','T','V','A','L','U','E','S','V',
    'I','R','T','U','A','L','I','M','I','T','W','H','E','N','W','H','E','R',
    'E','N','A','M','E','A','F','T','E','R','E','P','L','A','C','E','A','N',
    'D','E','F','A','U','L','T','A','U','T','O','I','N','C','R','E','M','E',
    'N','T','C','A','S','T','C','O','L','L','A','T','E','C','O','L','U','M',
    'N','C','O','M','M','I','T','C','O','N','F','L','I','C','T','C','R','E',
    'A','T','E','C','R','O','S','S','C','U','R','R','E','N','T','_','D','A',
    'T','E','C','U','R','R','E','N','T','_','T','I','M','E','S','T','A','M',
    'P','R','I','M','A','R','Y','D','E','F','E','R','R','E','D','E','L','E',
    'T','E','D','I','S','T','I','N','C','T','D','R','O','P','F','A','I','L',
    'F','R','O','M','F','U','L','L','G','L','O','B','Y','I','F','I','M','M',
    'E','D','I','A','T','E','I','S','N','U','L','L','O','R','D','E','R','E',
    'S','T','R','I','C','T','R','I','G','H','T','R','O','L','L','B','A','C',
    'K','R','O','W','U','N','I','O','N','U','S','I','N','G','V','I','E','W',
    'I','N','I','T','I','A','L','L','Y',
  };
  static const unsigned char aHash[127] = {
      68, 101, 114, 109,   0,   0,   0,   0,  74,   0,  69,   0,   0,
      42,  13,  70,  16,   0, 113,  77,  51, 108,   0,  20,   0,   0,
      35,   0, 116, 112,   0,  23,  85,   0,   9,   0,   0,  88,  92,
       0,  66,   6,   0,  45,  82,  97,   0, 115,  96,   0,   0,   0,
       0,  98,  25,   0,  18,   0, 118,  50,  24,   0,   5, 106,  26,
      89,   0,   0, 120, 102,  57, 119,  54,  29,  52,   0,  83,   0,
      95,  27,   0,  93,   0,   0,   0,  87,  84,  90,  80, 105,  15,
      39, 104,   0,  73,   0,  19,  81, 107,  33,   0, 117,  72, 110,
      59,  22,  76,   0,   0,  86,  40,  56, 111,   0,  36,   0,   0,
      30,   0,  78,  60,  61,   0,  21,  58,   0,  53,
  };
  static const unsigned char aNext[120] = {
       0,   0,   0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   2,   0,   0,   0,   0,   0,  12,  14,   0,   0,   0,
       0,   0,   7,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,   0,   0,   0,   0,   0,   0,  47,   0,  43,   3,
      44,   0,   0,   0,   0,  31,   0,  55,   0,  38,   0,   0,  64,
       1,  41,   0,   0,   0,   0,   0,   0,  46,  62,   0,   0,   0,
       0,  32,  49,  17,  34,  10,   0,   0,   0,  63,   0,   0,   0,
       0,   0,   0,  11,  94,  71,   0,   0,   8,   0, 100,  91,   0,
     103,   0,  79,   0,   0,  67,  48,   0,  28,  37,  65,  75,   0,
      99,   0,   0,
  };
  static const unsigned char aLen[120] = {
       7,   7,   5,   4,   6,   4,   5,   3,   6,   7,   3,   2,   6,
       6,   7,   7,   3,   8,   2,   6,   5,   4,   4,   3,  10,   4,
       6,  11,   6,   2,   7,   5,   5,   6,   9,   9,   7,  10,  10,
       4,   6,   2,   3,   6,   5,   7,   4,   5,   7,   6,   6,   5,
       6,   5,   5,   9,   7,   7,   3,   2,   4,   4,   7,   3,   6,
       4,   4,   6,   5,   4,   7,   6,   5,   6,   7,   5,   4,   5,
       6,   5,   7,   3,   7,  13,   2,   2,   4,   7,   6,   6,   8,
       6,   5,  12,  17,  12,   7,   8,   6,   8,   2,   4,   4,   4,
       4,   4,   2,   2,   9,   6,   5,   8,   5,   8,   3,   5,   5,
       4,   9,   3,
  };
  static const unsigned short int aOffset[120] = {
       0,   2,   2,   8,   9,  14,  16,  20,  23,  25,  25,  26,  29,
      33,  36,  41,  46,  48,  53,  54,  59,  62,  65,  67,  69,  78,
      81,  86,  91,  95,  96, 101, 105, 109, 114, 120, 128, 134, 144,
     151, 154, 154, 157, 160, 163, 168, 168, 172, 176, 183, 188, 193,
     196, 202, 205, 209, 218, 224, 224, 224, 227, 230, 234, 235, 239,
     245, 249, 251, 257, 262, 264, 271, 276, 281, 287, 293, 298, 302,
     305, 311, 315, 322, 324, 331, 333, 335, 344, 348, 355, 361, 367,
     375, 381, 386, 398, 398, 414, 421, 428, 434, 435, 442, 446, 450,
     454, 458, 461, 463, 465, 474, 480, 484, 492, 497, 505, 508, 513,
     518, 522, 527,
  };
  static const unsigned char aCode[120] = {
    TK_REINDEX,    TK_INDEXED,    TK_INDEX,      TK_DESC,       TK_ESCAPE,     
    TK_EACH,       TK_CHECK,      TK_KEY,        TK_BEFORE,     TK_FOREIGN,    
    TK_FOR,        TK_OR,         TK_IGNORE,     TK_LIKE_KW,    TK_EXPLAIN,    
    TK_INSTEAD,    TK_ADD,        TK_DATABASE,   TK_AS,         TK_SELECT,     
    TK_TABLE,      TK_JOIN_KW,    TK_THEN,       TK_END,        TK_DEFERRABLE, 
    TK_ELSE,       TK_EXCEPT,     TK_TRANSACTION,TK_ACTION,     TK_ON,         
    TK_JOIN_KW,    TK_ALTER,      TK_RAISE,      TK_EXISTS,     TK_SAVEPOINT,  
    TK_INTERSECT,  TK_TRIGGER,    TK_REFERENCES, TK_CONSTRAINT, TK_INTO,       
    TK_OFFSET,     TK_OF,         TK_SET,        TK_UNIQUE,     TK_QUERY,      
    TK_WITHOUT,    TK_WITH,       TK_JOIN_KW,    TK_RELEASE,    TK_ATTACH,     
    TK_HAVING,     TK_GROUP,      TK_UPDATE,     TK_BEGIN,      TK_JOIN_KW,    
    TK_RECURSIVE,  TK_BETWEEN,    TK_NOTNULL,    TK_NOT,        TK_NO,         
    TK_NULL,       TK_LIKE_KW,    TK_CASCADE,    TK_ASC,        TK_DETACH,     
    TK_CASE,       TK_JOIN,       TK_INSERT,     TK_MATCH,      TK_PLAN,       
    TK_ANALYZE,    TK_PRAGMA,     TK_ABORT,      TK_VALUES,     TK_VIRTUAL,    
    TK_LIMIT,      TK_WHEN,       TK_WHERE,      TK_RENAME,     TK_AFTER,      
    TK_REPLACE,    TK_AND,        TK_DEFAULT,    TK_AUTOINCR,   TK_TO,         
    TK_IN,         TK_CAST,       TK_COLLATE,    TK_COLUMNKW,   TK_COMMIT,     
    TK_CONFLICT,   TK_CREATE,     TK_JOIN_KW,    TK_CTIME_KW,   TK_CTIME_KW,   
    TK_CTIME_KW,   TK_PRIMARY,    TK_DEFERRED,   TK_DELETE,     TK_DISTINCT,   
    TK_IS,         TK_DROP,       TK_FAIL,       TK_FROM,       TK_JOIN_KW,    
    TK_LIKE_KW,    TK_BY,         TK_IF,         TK_IMMEDIATE,  TK_ISNULL,     
    TK_ORDER,      TK_RESTRICT,   TK_JOIN_KW,    TK_ROLLBACK,   TK_ROW,        
    TK_UNION,      TK_USING,      TK_VIEW,       TK_INITIALLY,  TK_ALL,        
  };
  int i, j;
  const char *zKW;
  if( n>=2 ){
    i = ((charMap(z[0])*4) ^ (charMap(z[n-1])*3) ^ n) % 127;
    for(i=((int)aHash[i])-1; i>=0; i=((int)aNext[i])-1){
      if( aLen[i]!=n ) continue;
      j = 0;
      zKW = &zText[aOffset[i]];
#ifdef SQLITE_ASCII
      while( j<n && (z[j]&~0x20)==zKW[j] ){ j++; }
#endif
#ifdef SQLITE_EBCDIC
      while( j<n && toupper(z[j])==zKW[j] ){ j++; }
#endif
      if( j<n ) continue;
      testcase( i==0 ); /* REINDEX */
      testcase( i==1 ); /* INDEXED */
      testcase( i==2 ); /* INDEX */
      testcase( i==3 ); /* DESC */
      testcase( i==4 ); /* ESCAPE */
      testcase( i==5 ); /* EACH */
      testcase( i==6 ); /* CHECK */
      testcase( i==7 ); /* KEY */
      testcase( i==8 ); /* BEFORE */
      testcase( i==9 ); /* FOREIGN */
      testcase( i==10 ); /* FOR */
      testcase( i==11 ); /* OR */
      testcase( i==12 ); /* IGNORE */
      testcase( i==13 ); /* REGEXP */
      testcase( i==14 ); /* EXPLAIN */
      testcase( i==15 ); /* INSTEAD */
      testcase( i==16 ); /* ADD */
      testcase( i==17 ); /* DATABASE */
      testcase( i==18 ); /* AS */
      testcase( i==19 ); /* SELECT */
      testcase( i==20 ); /* TABLE */
      testcase( i==21 ); /* LEFT */
      testcase( i==22 ); /* THEN */
      testcase( i==23 ); /* END */
      testcase( i==24 ); /* DEFERRABLE */
      testcase( i==25 ); /* ELSE */
      testcase( i==26 ); /* EXCEPT */
      testcase( i==27 ); /* TRANSACTION */
      testcase( i==28 ); /* ACTION */
      testcase( i==29 ); /* ON */
      testcase( i==30 ); /* NATURAL */
      testcase( i==31 ); /* ALTER */
      testcase( i==32 ); /* RAISE */
      testcase( i==33 ); /* EXISTS */
      testcase( i==34 ); /* SAVEPOINT */
      testcase( i==35 ); /* INTERSECT */
      testcase( i==36 ); /* TRIGGER */
      testcase( i==37 ); /* REFERENCES */
      testcase( i==38 ); /* CONSTRAINT */
      testcase( i==39 ); /* INTO */
      testcase( i==40 ); /* OFFSET */
      testcase( i==41 ); /* OF */
      testcase( i==42 ); /* SET */
      testcase( i==43 ); /* UNIQUE */
      testcase( i==44 ); /* QUERY */
      testcase( i==45 ); /* WITHOUT */
      testcase( i==46 ); /* WITH */
      testcase( i==47 ); /* OUTER */
      testcase( i==48 ); /* RELEASE */
      testcase( i==49 ); /* ATTACH */
      testcase( i==50 ); /* HAVING */
      testcase( i==51 ); /* GROUP */
      testcase( i==52 ); /* UPDATE */
      testcase( i==53 ); /* BEGIN */
      testcase( i==54 ); /* INNER */
      testcase( i==55 ); /* RECURSIVE */
      testcase( i==56 ); /* BETWEEN */
      testcase( i==57 ); /* NOTNULL */
      testcase( i==58 ); /* NOT */
      testcase( i==59 ); /* NO */
      testcase( i==60 ); /* NULL */
      testcase( i==61 ); /* LIKE */
      testcase( i==62 ); /* CASCADE */
      testcase( i==63 ); /* ASC */
      testcase( i==64 ); /* DETACH */
      testcase( i==65 ); /* CASE */
      testcase( i==66 ); /* JOIN */
      testcase( i==67 ); /* INSERT */
      testcase( i==68 ); /* MATCH */
      testcase( i==69 ); /* PLAN */
      testcase( i==70 ); /* ANALYZE */
      testcase( i==71 ); /* PRAGMA */
      testcase( i==72 ); /* ABORT */
      testcase( i==73 ); /* VALUES */
      testcase( i==74 ); /* VIRTUAL */
      testcase( i==75 ); /* LIMIT */
      testcase( i==76 ); /* WHEN */
      testcase( i==77 ); /* WHERE */
      testcase( i==78 ); /* RENAME */
      testcase( i==79 ); /* AFTER */
      testcase( i==80 ); /* REPLACE */
      testcase( i==81 ); /* AND */
      testcase( i==82 ); /* DEFAULT */
      testcase( i==83 ); /* AUTOINCREMENT */
      testcase( i==84 ); /* TO */
      testcase( i==85 ); /* IN */
      testcase( i==86 ); /* CAST */
      testcase( i==87 ); /* COLLATE */
      testcase( i==88 ); /* COLUMN */
      testcase( i==89 ); /* COMMIT */
      testcase( i==90 ); /* CONFLICT */
      testcase( i==91 ); /* CREATE */
      testcase( i==92 ); /* CROSS */
      testcase( i==93 ); /* CURRENT_DATE */
      testcase( i==94 ); /* CURRENT_TIMESTAMP */
      testcase( i==95 ); /* CURRENT_TIME */
      testcase( i==96 ); /* PRIMARY */
      testcase( i==97 ); /* DEFERRED */
      testcase( i==98 ); /* DELETE */
      testcase( i==99 ); /* DISTINCT */
      testcase( i==100 ); /* IS */
      testcase( i==101 ); /* DROP */
      testcase( i==102 ); /* FAIL */
      testcase( i==103 ); /* FROM */
      testcase( i==104 ); /* FULL */
      testcase( i==105 ); /* GLOB */
      testcase( i==106 ); /* BY */
      testcase( i==107 ); /* IF */
      testcase( i==108 ); /* IMMEDIATE */
      testcase( i==109 ); /* ISNULL */
      testcase( i==110 ); /* ORDER */
      testcase( i==111 ); /* RESTRICT */
      testcase( i==112 ); /* RIGHT */
      testcase( i==113 ); /* ROLLBACK */
      testcase( i==114 ); /* ROW */
      testcase( i==115 ); /* UNION */
      testcase( i==116 ); /* USING */
      testcase( i==117 ); /* VIEW */
      testcase( i==118 ); /* INITIALLY */
      testcase( i==119 ); /* ALL */
      *pType = aCode[i];
      break;
    }
  }
  return n;
}
int sqlite3KeywordCode(const unsigned char *z, int n){
  int id = TK_ID;
  keywordCode((char*)z, n, &id);
  return id;
}
#define SQLITE_N_KEYWORD 120
